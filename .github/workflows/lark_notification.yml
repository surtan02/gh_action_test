name: Lark Notification

on:
  workflow_call:
    inputs:
      CHANNEL_ID:
        type: string
        default: oc_112c4bd19a5fb0fd1ded2dc1945445e3
      NEW_VERSION:
        type: string
        default: "2.0.0"
      PREVIOUS_VERSION:
        type: string
        default: "1.0.0"
      VERSION_NAME:
        type: string
        default: "2.0.0"
      AUTHOR:
        type: string
        default: "github-user"
      TEAM:
        type: string
        default: "github-team"
      NEED_APPROVAL:
        type: string
        default: "false"
      JIRA_VERSION_ID:
        type: string
        default: "1.0.0"
      PROJECT_NAME:
        type: string
        default: "project-name"
      USER_TITLE:
        type: string
        default: "Release Author"
      LARK_TITLE:
        type: string
        default: "Deployment"


jobs:
  escape-quotes:
    runs-on: ubuntu-latest

    steps:
      - name: Deployment Message Preparation
        if: ${{ inputs.NEED_APPROVAL == 'false' }}
        id: deployment_message_parser
        run: |
          message='{
            "en_us": {
              "title": "${{ inputs.LARK_TITLE }} ${{ github.repository }}",
              "content": [
                [
                  {
                    "tag": "md",
                    "text": "\\n ---\\n"
                  },
                  {
                    "tag": "md",
                    "text": "**New Version:** ${{ inputs.NEW_VERSION }}"
                  },
                  {
                    "tag": "md",
                    "text": "**Previous Version:** ${{ inputs.PREVIOUS_VERSION }}"
                  },
                  {
                    "tag": "md",
                    "text": "**${{ inputs.USER_TITLE }}:** [${{ inputs.AUTHOR }}](${{ github.server_url }}/${{ inputs.AUTHOR }})"
                  },
                  {
                    "tag": "md",
                    "text": "**Github Release:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ inputs.VERSION_NAME }}"
                  },
                  {
                    "tag": "md",
                    "text": "**Jira Release**: https://29022131.atlassian.net/projects/${{ inputs.PROJECT_NAME }}/versions/${{ inputs.JIRA_VERSION_ID }}"
                  },
                  {
                    "tag": "md",
                    "text": "**Github Action**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  },
                  {
                    "tag": "md",
                    "text": "**Status:** ${{ job.status == 'success' && '<text_tag color=\\\"red\\\">Tag text</text_tag> Success ✅' || 'Failed ❌' }}"
                  }
                ]
              ]
            }
          }'
          
          one_line_json=$(echo "$message" | tr -d '\n' | sed 's/"/\\"/g')
          echo "Escaped One-Line JSON: $one_line_json"
          echo "escaped_json=$one_line_json" >> $GITHUB_OUTPUT	

      - name: get_tenant_access_token
        id: get_tenant_access_token
        run:  |
            response=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            "https://open.feishu.cn/open-apis/auth/v3/tenant_access_token/internal" \
            -d '{
              "app_id": "${{ secrets.LARK_APP_ID }}",
              "app_secret": "${{ secrets.LARK_APP_SECRET }}"
            }')
            
            if [ "$response" -eq 200 ]; then
              echo $response
              access_token=$(jq -r '.tenant_access_token' response.json)
              echo "tenant_access_token=${access_token}" >> $GITHUB_OUTPUT
            else
              error_message=$(jq -r '.errors' response.json)
              echo "Failed to retrieve Lark tenant_access_token, error message: $error_message"
              exit 1
            fi

      - name: deployment_message
        if: ${{ inputs.NEED_APPROVAL == 'false' }}
        continue-on-error: true
        run:  |
            response=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{steps.get_tenant_access_token.outputs.tenant_access_token}}" \
            "https://open.larksuite.com/open-apis/im/v1/messages?receive_id_type=chat_id" \
            -d '{
              "receive_id": "${{ inputs.CHANNEL_ID }}",
              "msg_type": "post",
              "content": "${{ steps.deployment_message_parser.outputs.escaped_json }}"
            }	')
            
            if [ "$response" -ne 200 ]; then
              error_message=$(jq -r '.errors' response.json)
              echo "Failed to send notification, error message: $error_message"
              exit 1
            fi

      - name: Approval Message Preparation
        if: ${{ inputs.NEED_APPROVAL == 'true' }}
        id: approval_message_parser
        run: |
          message='{
            "en_us": {
              "title": "${{ inputs.LARK_TITLE }} ${{ github.repository }}",
              "content": [
                [
                  {
                    "tag": "md",
                    "text": "\\n ---\\n"
                  },
                  {
                    "tag": "md",
                    "text": "**Need Approval From:** @${{ inputs.TEAM }} <at user_id=\\"all\\"></at>"
                  },
                  {
                    "tag": "md",
                    "text": "**Github Release:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ inputs.VERSION_NAME }} "
                  },
                  {
                    "tag": "md",
                    "text": "**Github Action**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} "
                  }
                ]
              ]
            }
          }'
          
          one_line_json=$(echo "$message" | tr -d '\n' | sed 's/"/\\"/g')
          echo "Escaped One-Line JSON: $one_line_json"
          echo "escaped_json=$one_line_json" >> $GITHUB_OUTPUT	

      - name: Approval Notification
        if: ${{ inputs.NEED_APPROVAL == 'true' }}
        continue-on-error: true
        run:  |
            response=$(curl -s -o response.json -w "%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{steps.get_tenant_access_token.outputs.tenant_access_token}}" \
            "https://open.larksuite.com/open-apis/im/v1/messages?receive_id_type=chat_id" \
            -d '{
              "receive_id": "${{ inputs.CHANNEL_ID }}",
              "msg_type": "post",
              "content": "${{ steps.approval_message_parser.outputs.escaped_json }}"
            }')
            
            if [ "$response" -ne 200 ]; then
              error_message=$(jq -r '.errors' response.json)
              echo "Failed to send notification, error message: $error_message"
              exit 1
            fi