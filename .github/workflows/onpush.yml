name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy-staging:
    name: üü° Deploy to Staging
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mock Deploy to Staging
        run: |
          echo "üü° Deploying to STAGING..."
          echo "‚úÖ Staging deploy complete!"

  get-prod-deploy:
    name: üìã Collect PRs for Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get last production SHA from environment
        id: lastsha
        run: |
          echo "sha=${{ vars.LAST_PROD_SHA }}" >> $GITHUB_OUTPUT

      - name: Collect merged PRs since last prod deploy
        id: pr_list
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const baseSha = "${{ steps.lastsha.outputs.sha }}" || "HEAD~10";
            const headSha = process.env.GITHUB_SHA;
            
            const { data: compare } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: baseSha,
              head: headSha,
            });
            
            const prs = new Set();
            for (const commit of compare.commits) {
              const { data: associated } =
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  commit_sha: commit.sha,
                });
              for (const pr of associated) {
                if (pr.merged_at) prs.add(`#${pr.number} - ${pr.title}`);
              }
            }
            
            const result = [...prs].join("\n") || "No new PRs found";
            core.setOutput("prs", result);

      - name: Comment on current PR with list of included PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `üöÄ This production deployment will include:\n\n${{ steps.pr_list.outputs.prs }}\n\n‚ö†Ô∏è Awaiting approval before release.`,
              });
            }

  deploy-production:
    name: üöÄ Deploy to Production
    needs: [deploy-staging, get-prod-deploy]
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: read
      actions: write
      pull-requests: write

    steps:
      - name: Mock Deploy to Production
        run: |
          echo "üöÄ Deploying to PRODUCTION..."
          echo "‚úÖ Production deploy complete!"

      - name: Create or Update LAST_PROD_SHA environment variable
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const envName = "production";
            const varName = "LAST_PROD_SHA";
            const newValue = process.env.GITHUB_SHA;

            try {
              await github.request("PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}", {
                owner,
                repo,
                environment_name: envName,
                name: varName,
                value: newValue,
              });
              core.info(`Updated ${varName} to ${newValue}`);
            } catch (err) {
              if (err.status === 404) {
                await github.request("POST /repos/{owner}/{repo}/environments/{environment_name}/variables", {
                  owner,
                  repo,
                  environment_name: envName,
                  name: varName,
                  value: newValue,
                });
                core.info(`Created ${varName} = ${newValue}`);
              } else {
                throw err;
              }
            }
